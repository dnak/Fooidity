<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>

namespace Fooidity
{
<# for(int i=1; i<=16; i++){
    var tGenericArgs = String.Join(",",Enumerable.Range(1,i).Select(it=>String.Format("T{0}",it)));
    var tConstructorArgs = String.Join(", ", Enumerable.Range(1,i).Select(it=>String.Format("FooId<T{0}> arg{0}",it)));
	var constraintFormatter = System.Environment.NewLine + "\t\t\t";
	var tConstraints = String.Join(constraintFormatter, Enumerable.Range(1,i)
							.Select(it=>String.Format("where T{0} : FooId",it)));
	var fieldFormatter = System.Environment.NewLine + "\t\t";
	var tFields = String.Join(fieldFormatter, Enumerable.Range(1,i)
							.Select(it=>String.Format("public FooId<T{0}> FooId{0} {{ get; private set; }}",it)));
	var initializationFormatter = System.Environment.NewLine + "\t\t\t";
	var tInitialization = String.Join(initializationFormatter, Enumerable.Range(1,i)
							.Select(it=>String.Format("FooId{0} = arg{0};",it)));
	var tSerialize = String.Join(initializationFormatter, Enumerable.Range(1,i)
							.Select(it=>String.Format("result += serializer.Serialize(FooId{0});",it)));
#>
    public class Snapshot<<#=tGenericArgs#>>
			<#=tConstraints#>
    {
        public Snapshot(<#=tConstructorArgs#>)
        {
			<#=tInitialization#>
        }    

		public EvaluationResult Serialize()
		{
			var serializer = new EvaluationSerializer();	
			var result = string.Empty;

			<#=tSerialize#>

			return new EvaluationResult(result);
		}

		<#=tFields#>

	}

<# 
    }
#>   

	
}
